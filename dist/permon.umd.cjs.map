{"version":3,"file":"permon.umd.cjs","sources":["../lib/metrics/basic-stats/basic-stats.ts","../lib/metrics/basic-stats/fps.ts","../lib/metrics/basic-stats/frame-latency.ts","../lib/metrics/basic-stats/memory.ts","../lib/metrics/defaults.ts","../lib/utils.ts","../lib/permon.ts"],"sourcesContent":["import { roundToInt } from '../../utils'\nimport { Panel } from '../types'\n\nexport interface BasicStats {\n  current: number\n  mean: number\n  lowest: number\n  highest: number\n}\n\nexport interface PanelConfig {\n  title: string\n  valueFormatter?: (value: number) => string\n  delayBetweenDomUpdatesMs?: number\n  backgroundColor?: string\n  foregroundColor?: string\n}\n\nexport interface PanelConfig_Normalized {\n  title: string\n  valueFormatter: (value: number) => string\n  delayBetweenDomUpdatesMs: number\n  backgroundColor: string\n  foregroundColor: string\n}\n\nconst normalizeConfig = (input?: PanelConfig): PanelConfig_Normalized => {\n  return ({\n    title: input?.title ?? 'N/A',\n    valueFormatter: input?.valueFormatter ?? ((value) => value.toString()),\n    delayBetweenDomUpdatesMs: input?.delayBetweenDomUpdatesMs ?? 250,\n    backgroundColor: input?.backgroundColor ?? '#0000ff',\n    foregroundColor: input?.foregroundColor ?? '#00ff00',\n  })\n}\n\nexport type BasicStatsPanel = Panel<BasicStats | null>\n\nexport const createBasicStatsPanel = (_config: PanelConfig): BasicStatsPanel => {\n\n  const { title, valueFormatter, delayBetweenDomUpdatesMs, backgroundColor, foregroundColor } = normalizeConfig(_config)\n\n  const pixelRatio = Math.ceil(1 / (window.devicePixelRatio ?? 1))\n  const upscaleFactor = pixelRatio + 2\n\n  const _rawCanvasWidth = 120\n  const _rawCanvasHeight = 60\n  const canvasWidth = upscaleFactor * _rawCanvasWidth\n  const canvasHeight = upscaleFactor * _rawCanvasHeight\n  const textX = upscaleFactor * 3\n  const textY = upscaleFactor * 3\n  const fontSize = upscaleFactor * 10\n  const graphX = upscaleFactor * 3\n  const graphY = 2 * textY + fontSize\n  const graphWidth = (canvasWidth - 2 * graphX)\n  const graphHeight = canvasHeight - graphY - textY\n  const graphLineThickness = upscaleFactor * 1\n  const graphLinesSpacing = upscaleFactor\n\n  const canvas = document.createElement('canvas')\n  canvas.width = canvasWidth\n  canvas.height = canvasHeight\n  canvas.style.width = pixelRatio * _rawCanvasWidth + 'px'\n  canvas.style.height = pixelRatio * _rawCanvasHeight + 'px'\n\n  const context = canvas.getContext('2d')\n\n  if (context == null) {\n    throw new Error('Canvas context not found.')\n  }\n\n  context.font = 'bold ' + fontSize + 'px monospace'\n  context.textBaseline = 'top'\n\n  context.fillStyle = backgroundColor\n  context.fillRect(0, 0, canvasWidth, canvasHeight)\n\n  context.fillStyle = foregroundColor\n  context.fillText(title, textX, textY)\n  context.fillRect(graphX, graphY, graphWidth, graphHeight)\n\n  context.fillStyle = backgroundColor\n  context.globalAlpha = 0.9\n  context.fillRect(graphX, graphY, graphWidth, graphHeight)\n\n  let _tLatestUpdate = -Infinity\n\n  return {\n    dom: canvas,\n    updateDom: (stats: BasicStats | null) => {\n      const t = performance.now()\n      // Update once every 50 ms.\n      if (stats == null || _tLatestUpdate + delayBetweenDomUpdatesMs > t) {\n        return\n      } else {\n        _tLatestUpdate = t\n      }\n\n      const { current: value, lowest: min, highest: max } = stats\n\n      context.fillStyle = backgroundColor\n      context.globalAlpha = 1\n      context.fillRect(0, 0, canvasWidth, graphY)\n      context.fillStyle = foregroundColor\n      context.fillText(`${title} (${valueFormatter(min)}â€“${valueFormatter(max)}) ${valueFormatter(value)}`, textX, textY)\n\n      context.drawImage(canvas, graphX + graphLinesSpacing, graphY, graphWidth - graphLinesSpacing, graphHeight, graphX, graphY, graphWidth - graphLinesSpacing, graphHeight)\n\n      context.fillRect(graphX + graphWidth - graphLineThickness, graphY, graphLineThickness, graphHeight)\n\n      context.fillStyle = backgroundColor\n      context.globalAlpha = 0.9\n      context.fillRect(graphX + graphWidth - graphLineThickness, graphY, graphLineThickness, roundToInt((1 - (value / max)) * graphHeight))\n    },\n  }\n\n}\n","import { onDocumentVisibilityChange } from '../../utils'\nimport { MetricCalculator } from '../types'\nimport { BasicStats } from './basic-stats'\n\nexport const createFpsCalculator = () => {\n\n  let _isStable = false\n  const _sampleWindow: Array<number> = []\n\n  let _lowest = Infinity\n  let _highest = 0\n  let _count = 0\n  let _mean = 0\n\n  let isDocumentVisible = onDocumentVisibilityChange((isVisible) => {\n    isDocumentVisible = isVisible\n    _isStable = false\n    _sampleWindow.length = 0\n  })\n\n  const metric: MetricCalculator<BasicStats | null> = (t) => {\n    if (!isDocumentVisible) {\n      return null\n    }\n    _sampleWindow.push(t)\n    let elapsedFromOldest = t - _sampleWindow[0]\n    if (!_isStable) {\n      if (elapsedFromOldest >= 1900) {\n        _isStable = true\n      } else {\n        return null\n      }\n    }\n    while (elapsedFromOldest >= 1000) {\n      _sampleWindow.shift()\n      elapsedFromOldest = t - _sampleWindow[0]\n    }\n    const currFps = _sampleWindow.length\n    _count++\n    _mean = _mean * (_count - 1) / _count + currFps / _count\n    _lowest = Math.min(_lowest, currFps)\n    _highest = Math.max(_highest, currFps)\n    return {\n      current: currFps,\n      mean: _mean,\n      lowest: _lowest,\n      highest: _highest,\n    }\n  }\n\n  return metric\n\n}\n","import { onDocumentVisibilityChange } from '../../utils'\nimport { MetricCalculator } from '../types'\nimport { BasicStats } from './basic-stats'\n\nexport const createFrameLatencyCalculator = () => {\n\n  let _isStable = false\n  let _tFirstVisible = Infinity\n  let _tPrev = Infinity\n  let _tCurr = Infinity\n\n  let _lowest = +Infinity\n  let _highest = -Infinity\n  let _count = 0\n  let _mean = 0\n\n  let isDocumentVisible = onDocumentVisibilityChange((isVisible) => {\n    isDocumentVisible = isVisible\n    _isStable = false\n    _tFirstVisible = Infinity\n    _tPrev = Infinity\n    _tCurr = Infinity\n  })\n\n  const metric: MetricCalculator<BasicStats | null> = (t) => {\n    if (!isDocumentVisible) {\n      return null\n    }\n    _tPrev = _tCurr\n    _tCurr = t\n    if (!_isStable) {\n      _tFirstVisible = Math.min(_tFirstVisible, t)\n      if (t - _tFirstVisible >= 1900) {\n        _isStable = true\n      } else {\n        return null\n      }\n    }\n    const currLatency = _tCurr - _tPrev\n    if (currLatency < _lowest) {\n      _lowest = currLatency\n    }\n    if (currLatency > _highest) {\n      _highest = currLatency\n    }\n    _count++\n    _mean = _mean * (_count - 1) / _count + currLatency / _count\n    return {\n      current: currLatency,\n      mean: _mean,\n      lowest: _lowest,\n      highest: _highest,\n    }\n  }\n\n  return metric\n\n}","import { MetricCalculator } from '../types'\nimport { BasicStats } from './basic-stats'\n\n/**\n * More info on memory estimation: https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory\n */\nexport const createMemoryCalculator = () => {\n\n  let _lowest = Infinity\n  let _highest = 0\n  let _count = 0\n  let _mean = 0\n\n  const metric: MetricCalculator<BasicStats | null> = () => {\n    try {\n      const memory = (performance as any).memory\n      const currMem = memory.usedJSHeapSize\n      _count++\n      _mean = _mean * (_count - 1) / _count + currMem / _count\n      _lowest = Math.min(_lowest, currMem)\n      _highest = Math.max(_highest, currMem)\n      return {\n        current: currMem,\n        mean: _mean,\n        highest: _highest,\n        lowest: _lowest,\n      }\n    } catch (error) {\n    }\n    return null\n  }\n\n  return metric\n\n}","import { integerFormatter, roundToInt } from '../utils'\nimport { createBasicStatsPanel } from './basic-stats/basic-stats'\nimport { createFpsCalculator } from './basic-stats/fps'\nimport { createFrameLatencyCalculator } from './basic-stats/frame-latency'\nimport { createMemoryCalculator } from './basic-stats/memory'\nimport { MonitoredMetrics } from './types'\n\nconst fps = {\n  createCalculator: createFpsCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'FPS',\n      valueFormatter: integerFormatter,\n      backgroundColor: '#181d37',\n      foregroundColor: '#6ef8fc',\n    })\n  },\n}\n\nconst frameLatency = {\n  createCalculator: createFrameLatencyCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'MS',\n      valueFormatter: integerFormatter,\n      backgroundColor: '#22361a',\n      foregroundColor: '#78f123',\n    })\n  },\n}\n\nconst memory = {\n  createCalculator: createMemoryCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'MB',\n      valueFormatter: (value) => (roundToInt(value * 0.000001)).toString(),\n      backgroundColor: '#341e2a',\n      foregroundColor: '#ec5499',\n    })\n  },\n}\n\nexport const metricsUtils = {\n  fps,\n  frameLatency,\n  memory,\n  createAllDefaultMetrics: (): MonitoredMetrics => {\n    return {\n      fps: { calculator: fps.createCalculator(), panel: fps.createPanel() },\n      frameLatency: { calculator: frameLatency.createCalculator(), panel: frameLatency.createPanel() },\n      memory: { calculator: memory.createCalculator(), panel: memory.createPanel() },\n    }\n  },\n}","import { metricsUtils } from './metrics/defaults'\n\nexport const onDocumentVisibilityChange = (callback: (isDocumentVisible: boolean) => void): boolean => {\n\n  document.addEventListener('visibilitychange', () => {\n    callback(!document.hidden)\n  })\n\n  return !document.hidden\n}\n\nexport const roundDecimal = (decimalPlaces: number) => (x: number): number => {\n  const decimalDivider = Math.pow(10, decimalPlaces)\n  return Math.round((x * decimalDivider + Number.EPSILON) / decimalDivider)\n}\n\nexport const roundToInt = roundDecimal(0)\n\nexport const integerFormatter = (x: number): string => roundToInt(x).toString()\n\nexport const roundToTwoDecimalPlaces = roundDecimal(2)\n\nexport const roundToTwoDecimalPlacesFormatter = (x: number): string => roundToTwoDecimalPlaces(x).toString()\n\nexport const UTILS = {\n  permonVersion: import.meta.env.__PERMON_VERSION__,\n  metrics: metricsUtils,\n  formatters: {\n    roundDecimal,\n    integerFormatter,\n    roundToTwoDecimalPlacesFormatter,\n  },\n  onDocumentVisibilityChange,\n}\n","import { MonitoredMetrics, UnwrapMonitoredMetrics } from './metrics'\nimport { UTILS } from './utils'\n\nexport interface PermonConfig<T extends MonitoredMetrics> {\n  metrics?: T\n  headless?: boolean\n  styleAndAppendDomContainer?: (container: HTMLDivElement) => void\n  onPublishStats?: (stats: UnwrapMonitoredMetrics<T>) => void\n  minDelayMsBetweenPublishingStats?: number\n  skipGreeting?: boolean\n}\n\ninterface PermonConfig_Normalized<T extends MonitoredMetrics> {\n  metrics: T\n  headless: boolean\n  styleAndAppendDomContainer: (container: HTMLDivElement) => void\n  onPublishStats: (stats: UnwrapMonitoredMetrics<T>) => void\n  minDelayMsBetweenPublishingStats: number\n  skipGreeting: boolean\n}\n\nconst normalizeConfig = <T extends MonitoredMetrics> (input?: PermonConfig<T>): PermonConfig_Normalized<T> => {\n  return {\n    metrics: input?.metrics == null\n      ? UTILS.metrics.createAllDefaultMetrics()\n      : Object.entries(input.metrics).reduce((acc, [key, rawMetric]) => {\n        return {\n          ...acc,\n          [key]: { panel: rawMetric.panel, calculator: rawMetric.calculator },\n        }\n      }, {} as any),\n    headless: input?.headless ?? false,\n    styleAndAppendDomContainer: input?.styleAndAppendDomContainer ?? ((container: HTMLDivElement) => {\n      container.style.cssText = 'z-index:5100;display:flex;gap:4px;position:fixed;top:4px;left:4px;opacity:0.9;pointer-events:none;'\n      document.body.appendChild(container)\n    }),\n    onPublishStats: input?.onPublishStats ?? (() => { }),\n    minDelayMsBetweenPublishingStats: Math.max(0, input?.minDelayMsBetweenPublishingStats ?? 1000),\n    skipGreeting: input?.skipGreeting ?? false,\n  }\n}\n\nexport class Permon<T extends MonitoredMetrics> {\n\n  private rafId: number | null = null\n  private domContainer: HTMLElement | null = null\n\n  public static readonly UTILS = UTILS\n\n  public constructor (_config?: PermonConfig<T>) {\n\n    const config = normalizeConfig(_config)\n\n    if (!config.headless) {\n      const container = document.createElement('div')\n      for (const [_, { panel }] of Object.entries(config.metrics)) {\n        if (panel?.dom != null) {\n          container.appendChild(panel.dom)\n        }\n      }\n      config.styleAndAppendDomContainer(container)\n    }\n\n    let tLatestPublish: number = -Infinity\n\n    const onAnimationFrame = () => {\n      const t = performance.now()\n      const stats = {} as UnwrapMonitoredMetrics<T>\n      for (const [key, { calculator, panel }] of Object.entries(config.metrics)) {\n        const value = calculator(t)\n        stats[key as keyof T] = value\n        if (!config.headless && panel != null) {\n          panel.updateDom(value)\n        }\n      }\n      if (tLatestPublish + config.minDelayMsBetweenPublishingStats <= t) {\n        config.onPublishStats(stats)\n        tLatestPublish = t\n      }\n      this.rafId = requestAnimationFrame(onAnimationFrame)\n    }\n\n    this.rafId = requestAnimationFrame(onAnimationFrame)\n\n    if (!config.skipGreeting) {\n      console.log(`Permon (${UTILS.permonVersion}) has started monitoring the page performance.`)\n    }\n\n  }\n\n  public destroy () {\n    if (this.rafId != null) {\n      cancelAnimationFrame(this.rafId)\n    }\n    this.rafId = null\n    this.domContainer?.remove()\n  }\n\n}\n"],"names":["normalizeConfig","memory"],"mappings":";;;;;;;;;;AA0BA,QAAMA,oBAAkB,CAAC,UAAgD;AAC/D,WAAA;AAAA,MACN,QAAO,+BAAO,UAAS;AAAA,MACvB,iBAAgB,+BAAO,oBAAmB,CAAC,UAAU,MAAM;MAC3D,2BAA0B,+BAAO,6BAA4B;AAAA,MAC7D,kBAAiB,+BAAO,oBAAmB;AAAA,MAC3C,kBAAiB,+BAAO,oBAAmB;AAAA,IAAA;AAAA,EAE/C;AAIa,QAAA,wBAAwB,CAAC,YAA0C;AAExE,UAAA,EAAE,OAAO,gBAAgB,0BAA0B,iBAAiB,gBAAgB,IAAIA,kBAAgB,OAAO;AAErH,UAAM,aAAa,KAAK,KAAK,KAAK,OAAO,oBAAoB,EAAE;AAC/D,UAAM,gBAAgB,aAAa;AAEnC,UAAM,kBAAkB;AACxB,UAAM,mBAAmB;AACzB,UAAM,cAAc,gBAAgB;AACpC,UAAM,eAAe,gBAAgB;AACrC,UAAM,QAAQ,gBAAgB;AAC9B,UAAM,QAAQ,gBAAgB;AAC9B,UAAM,WAAW,gBAAgB;AACjC,UAAM,SAAS,gBAAgB;AACzB,UAAA,SAAS,IAAI,QAAQ;AACrB,UAAA,aAAc,cAAc,IAAI;AAChC,UAAA,cAAc,eAAe,SAAS;AAC5C,UAAM,qBAAqB,gBAAgB;AAC3C,UAAM,oBAAoB;AAEpB,UAAA,SAAS,SAAS,cAAc,QAAQ;AAC9C,WAAO,QAAQ;AACf,WAAO,SAAS;AACT,WAAA,MAAM,QAAQ,aAAa,kBAAkB;AAC7C,WAAA,MAAM,SAAS,aAAa,mBAAmB;AAEhD,UAAA,UAAU,OAAO,WAAW,IAAI;AAEtC,QAAI,WAAW,MAAM;AACb,YAAA,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAEQ,YAAA,OAAO,UAAU,WAAW;AACpC,YAAQ,eAAe;AAEvB,YAAQ,YAAY;AACpB,YAAQ,SAAS,GAAG,GAAG,aAAa,YAAY;AAEhD,YAAQ,YAAY;AACZ,YAAA,SAAS,OAAO,OAAO,KAAK;AACpC,YAAQ,SAAS,QAAQ,QAAQ,YAAY,WAAW;AAExD,YAAQ,YAAY;AACpB,YAAQ,cAAc;AACtB,YAAQ,SAAS,QAAQ,QAAQ,YAAY,WAAW;AAExD,QAAI,iBAAiB;AAEd,WAAA;AAAA,MACL,KAAK;AAAA,MACL,WAAW,CAAC,UAA6B;AACjC,cAAA,IAAI,YAAY;AAEtB,YAAI,SAAS,QAAQ,iBAAiB,2BAA2B,GAAG;AAClE;AAAA,QAAA,OACK;AACY,2BAAA;AAAA,QACnB;AAEA,cAAM,EAAE,SAAS,OAAO,QAAQ,KAAK,SAAS,IAAQ,IAAA;AAEtD,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACtB,gBAAQ,SAAS,GAAG,GAAG,aAAa,MAAM;AAC1C,gBAAQ,YAAY;AACpB,gBAAQ,SAAS,GAAG,UAAU,eAAe,GAAG,KAAK,eAAe,GAAG,MAAM,eAAe,KAAK,KAAK,OAAO,KAAK;AAElH,gBAAQ,UAAU,QAAQ,SAAS,mBAAmB,QAAQ,aAAa,mBAAmB,aAAa,QAAQ,QAAQ,aAAa,mBAAmB,WAAW;AAEtK,gBAAQ,SAAS,SAAS,aAAa,oBAAoB,QAAQ,oBAAoB,WAAW;AAElG,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACd,gBAAA,SAAS,SAAS,aAAa,oBAAoB,QAAQ,oBAAoB,YAAY,IAAK,QAAQ,OAAQ,WAAW,CAAC;AAAA,MACtI;AAAA,IAAA;AAAA,EAGJ;AChHO,QAAM,sBAAsB,MAAM;AAEvC,QAAI,YAAY;AAChB,UAAM,gBAA+B,CAAA;AAErC,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,SAAS;AACb,QAAI,QAAQ;AAER,QAAA,oBAAoB,2BAA2B,CAAC,cAAc;AAC5C,0BAAA;AACR,kBAAA;AACZ,oBAAc,SAAS;AAAA,IAAA,CACxB;AAEK,UAAA,SAA8C,CAAC,MAAM;AACzD,UAAI,CAAC,mBAAmB;AACf,eAAA;AAAA,MACT;AACA,oBAAc,KAAK,CAAC;AAChB,UAAA,oBAAoB,IAAI,cAAc,CAAC;AAC3C,UAAI,CAAC,WAAW;AACd,YAAI,qBAAqB,MAAM;AACjB,sBAAA;AAAA,QAAA,OACP;AACE,iBAAA;AAAA,QACT;AAAA,MACF;AACA,aAAO,qBAAqB,KAAM;AAChC,sBAAc,MAAM;AACA,4BAAA,IAAI,cAAc,CAAC;AAAA,MACzC;AACA,YAAM,UAAU,cAAc;AAC9B;AACA,cAAQ,SAAS,SAAS,KAAK,SAAS,UAAU;AACxC,gBAAA,KAAK,IAAI,SAAS,OAAO;AACxB,iBAAA,KAAK,IAAI,UAAU,OAAO;AAC9B,aAAA;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,MAAA;AAAA,IACX;AAGK,WAAA;AAAA,EAET;AChDO,QAAM,+BAA+B,MAAM;AAEhD,QAAI,YAAY;AAChB,QAAI,iBAAiB;AACrB,QAAI,SAAS;AACb,QAAI,SAAS;AAEb,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,SAAS;AACb,QAAI,QAAQ;AAER,QAAA,oBAAoB,2BAA2B,CAAC,cAAc;AAC5C,0BAAA;AACR,kBAAA;AACK,uBAAA;AACR,eAAA;AACA,eAAA;AAAA,IAAA,CACV;AAEK,UAAA,SAA8C,CAAC,MAAM;AACzD,UAAI,CAAC,mBAAmB;AACf,eAAA;AAAA,MACT;AACS,eAAA;AACA,eAAA;AACT,UAAI,CAAC,WAAW;AACG,yBAAA,KAAK,IAAI,gBAAgB,CAAC;AACvC,YAAA,IAAI,kBAAkB,MAAM;AAClB,sBAAA;AAAA,QAAA,OACP;AACE,iBAAA;AAAA,QACT;AAAA,MACF;AACA,YAAM,cAAc,SAAS;AAC7B,UAAI,cAAc,SAAS;AACf,kBAAA;AAAA,MACZ;AACA,UAAI,cAAc,UAAU;AACf,mBAAA;AAAA,MACb;AACA;AACA,cAAQ,SAAS,SAAS,KAAK,SAAS,cAAc;AAC/C,aAAA;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,MAAA;AAAA,IACX;AAGK,WAAA;AAAA,EAET;ACnDO,QAAM,yBAAyB,MAAM;AAE1C,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,SAAS;AACb,QAAI,QAAQ;AAEZ,UAAM,SAA8C,MAAM;AACpD,UAAA;AACF,cAAMC,UAAU,YAAoB;AACpC,cAAM,UAAUA,QAAO;AACvB;AACA,gBAAQ,SAAS,SAAS,KAAK,SAAS,UAAU;AACxC,kBAAA,KAAK,IAAI,SAAS,OAAO;AACxB,mBAAA,KAAK,IAAI,UAAU,OAAO;AAC9B,eAAA;AAAA,UACL,SAAS;AAAA,UACT,MAAM;AAAA,UACN,SAAS;AAAA,UACT,QAAQ;AAAA,QAAA;AAAA,eAEH;MACT;AACO,aAAA;AAAA,IAAA;AAGF,WAAA;AAAA,EAET;AC3BA,QAAM,MAAM;AAAA,IACV,kBAAkB;AAAA,IAClB,aAAa,MAAM;AACjB,aAAO,sBAAsB;AAAA,QAC3B,OAAO;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,MAAA,CAClB;AAAA,IACH;AAAA,EACF;AAEA,QAAM,eAAe;AAAA,IACnB,kBAAkB;AAAA,IAClB,aAAa,MAAM;AACjB,aAAO,sBAAsB;AAAA,QAC3B,OAAO;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,MAAA,CAClB;AAAA,IACH;AAAA,EACF;AAEA,QAAM,SAAS;AAAA,IACb,kBAAkB;AAAA,IAClB,aAAa,MAAM;AACjB,aAAO,sBAAsB;AAAA,QAC3B,OAAO;AAAA,QACP,gBAAgB,CAAC,UAAW,WAAW,QAAQ,IAAQ,EAAG,SAAS;AAAA,QACnE,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,MAAA,CAClB;AAAA,IACH;AAAA,EACF;AAEO,QAAM,eAAe;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,IACA,yBAAyB,MAAwB;AACxC,aAAA;AAAA,QACL,KAAK,EAAE,YAAY,IAAI,iBAAoB,GAAA,OAAO,IAAI,cAAc;AAAA,QACpE,cAAc,EAAE,YAAY,aAAa,iBAAoB,GAAA,OAAO,aAAa,cAAc;AAAA,QAC/F,QAAQ,EAAE,YAAY,OAAO,iBAAoB,GAAA,OAAO,OAAO,cAAc;AAAA,MAAA;AAAA,IAEjF;AAAA,EACF;ACpDa,QAAA,6BAA6B,CAAC,aAA4D;AAE5F,aAAA,iBAAiB,oBAAoB,MAAM;AACzC,eAAA,CAAC,SAAS,MAAM;AAAA,IAAA,CAC1B;AAED,WAAO,CAAC,SAAS;AAAA,EACnB;AAEO,QAAM,eAAe,CAAC,kBAA0B,CAAC,MAAsB;AAC5E,UAAM,iBAAiB,KAAK,IAAI,IAAI,aAAa;AACjD,WAAO,KAAK,OAAO,IAAI,iBAAiB,OAAO,WAAW,cAAc;AAAA,EAC1E;AAEa,QAAA,aAAa,aAAa,CAAC;AAEjC,QAAM,mBAAmB,CAAC,MAAsB,WAAW,CAAC,EAAE,SAAS;AAEjE,QAAA,0BAA0B,aAAa,CAAC;AAE9C,QAAM,mCAAmC,CAAC,MAAsB,wBAAwB,CAAC,EAAE,SAAS;AAEpG,QAAM,QAAQ;AAAA,IACnB,eAAe;AAAA,IACf,SAAS;AAAA,IACT,YAAY;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA;AAAA,EACF;ACZA,QAAM,kBAAkB,CAA8B,UAAwD;AACrG,WAAA;AAAA,MACL,UAAS,+BAAO,YAAW,OACvB,MAAM,QAAQ,4BACd,OAAO,QAAQ,MAAM,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,SAAS,MAAM;AACzD,eAAA;AAAA,UACL,GAAG;AAAA,UACH,CAAC,GAAG,GAAG,EAAE,OAAO,UAAU,OAAO,YAAY,UAAU,WAAW;AAAA,QAAA;AAAA,MAEtE,GAAG,EAAS;AAAA,MACd,WAAU,+BAAO,aAAY;AAAA,MAC7B,6BAA4B,+BAAO,gCAA+B,CAAC,cAA8B;AAC/F,kBAAU,MAAM,UAAU;AACjB,iBAAA,KAAK,YAAY,SAAS;AAAA,MAAA;AAAA,MAErC,iBAAgB,+BAAO,oBAAmB,MAAM;AAAA,MAAA;AAAA,MAChD,kCAAkC,KAAK,IAAI,IAAG,+BAAO,qCAAoC,GAAI;AAAA,MAC7F,eAAc,+BAAO,iBAAgB;AAAA,IAAA;AAAA,EAEzC;AAEO,QAAM,OAAmC;AAAA,IAOvC,YAAa,SAA2B;AALvC,mCAAuB;AACvB,0CAAmC;AAMnC,YAAA,SAAS,gBAAgB,OAAO;AAElC,UAAA,CAAC,OAAO,UAAU;AACd,cAAA,YAAY,SAAS,cAAc,KAAK;AACnC,mBAAA,CAAC,GAAG,EAAE,MAAO,CAAA,KAAK,OAAO,QAAQ,OAAO,OAAO,GAAG;AACvD,eAAA,+BAAO,QAAO,MAAM;AACZ,sBAAA,YAAY,MAAM,GAAG;AAAA,UACjC;AAAA,QACF;AACA,eAAO,2BAA2B,SAAS;AAAA,MAC7C;AAEA,UAAI,iBAAyB;AAE7B,YAAM,mBAAmB,MAAM;AACvB,cAAA,IAAI,YAAY;AACtB,cAAM,QAAQ,CAAA;AACH,mBAAA,CAAC,KAAK,EAAE,YAAY,MAAA,CAAO,KAAK,OAAO,QAAQ,OAAO,OAAO,GAAG;AACnE,gBAAA,QAAQ,WAAW,CAAC;AAC1B,gBAAM,GAAc,IAAI;AACxB,cAAI,CAAC,OAAO,YAAY,SAAS,MAAM;AACrC,kBAAM,UAAU,KAAK;AAAA,UACvB;AAAA,QACF;AACI,YAAA,iBAAiB,OAAO,oCAAoC,GAAG;AACjE,iBAAO,eAAe,KAAK;AACV,2BAAA;AAAA,QACnB;AACK,aAAA,QAAQ,sBAAsB,gBAAgB;AAAA,MAAA;AAGhD,WAAA,QAAQ,sBAAsB,gBAAgB;AAE/C,UAAA,CAAC,OAAO,cAAc;AAChB,gBAAA,IAAI,WAAW,MAAM,6DAA6D;AAAA,MAC5F;AAAA,IAEF;AAAA,IAEO,UAAW;;AACZ,UAAA,KAAK,SAAS,MAAM;AACtB,6BAAqB,KAAK,KAAK;AAAA,MACjC;AACA,WAAK,QAAQ;AACb,iBAAK,iBAAL,mBAAmB;AAAA,IACrB;AAAA,EAEF;AAnDE,gBALW,QAKY,SAAQ;;;;"}