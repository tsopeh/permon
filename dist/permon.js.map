{"version":3,"file":"permon.js","sources":["../lib/metrics/basic-stats/basic-stats-panel.ts","../lib/metrics/basic-stats/fps.ts","../lib/metrics/basic-stats/frame-latency.ts","../lib/metrics/basic-stats/memory.ts","../lib/metrics/defaults.ts","../lib/utils.ts","../lib/permon.ts"],"sourcesContent":["import { roundToInt } from '../../utils'\nimport { BasicStats, Panel } from '../types'\n\nexport interface PanelConfig {\n  title: string\n  valueFormatter?: (value: number) => string\n  delayBetweenDomUpdatesMs?: number\n  backgroundColor?: string\n  foregroundColor?: string\n}\n\nexport interface PanelConfig_Normalized {\n  title: string\n  valueFormatter: (value: number) => string\n  delayBetweenDomUpdatesMs: number\n  backgroundColor: string\n  foregroundColor: string\n}\n\nconst normalizeConfig = (input?: PanelConfig): PanelConfig_Normalized => {\n  return ({\n    title: input?.title ?? 'N/A',\n    valueFormatter: input?.valueFormatter ?? ((value) => value.toString()),\n    delayBetweenDomUpdatesMs: input?.delayBetweenDomUpdatesMs ?? 250,\n    backgroundColor: input?.backgroundColor ?? '#0000ff',\n    foregroundColor: input?.foregroundColor ?? '#00ff00',\n  })\n}\n\nexport type BasicStatsPanel = Panel<BasicStats | null>\n\nexport const createBasicStatsPanel = (_config: PanelConfig): BasicStatsPanel => {\n\n  const { title, valueFormatter, delayBetweenDomUpdatesMs, backgroundColor, foregroundColor } = normalizeConfig(_config)\n\n  const pixelRatio = Math.ceil(1 / (window.devicePixelRatio ?? 1))\n  const upscaleFactor = pixelRatio + 2\n\n  const _rawCanvasWidth = 120\n  const _rawCanvasHeight = 60\n  const canvasWidth = upscaleFactor * _rawCanvasWidth\n  const canvasHeight = upscaleFactor * _rawCanvasHeight\n  const textX = upscaleFactor * 3\n  const textY = upscaleFactor * 3\n  const fontSize = upscaleFactor * 10\n  const graphX = upscaleFactor * 3\n  const graphY = 2 * textY + fontSize\n  const graphWidth = (canvasWidth - 2 * graphX)\n  const graphHeight = canvasHeight - graphY - textY\n  const graphLineThickness = upscaleFactor * 1\n  const graphLinesSpacing = upscaleFactor\n\n  const canvas = document.createElement('canvas')\n  canvas.width = canvasWidth\n  canvas.height = canvasHeight\n  canvas.style.width = pixelRatio * _rawCanvasWidth + 'px'\n  canvas.style.height = pixelRatio * _rawCanvasHeight + 'px'\n  canvas.style.pointerEvents = 'none'\n\n  const context = canvas.getContext('2d')\n\n  if (context == null) {\n    throw new Error('Canvas context not found.')\n  }\n\n  context.font = 'bold ' + fontSize + 'px monospace'\n  context.textBaseline = 'top'\n\n  context.fillStyle = backgroundColor\n  context.fillRect(0, 0, canvasWidth, canvasHeight)\n\n  context.fillStyle = foregroundColor\n  context.fillText(title, textX, textY)\n  context.fillRect(graphX, graphY, graphWidth, graphHeight)\n\n  context.fillStyle = backgroundColor\n  context.globalAlpha = 0.9\n  context.fillRect(graphX, graphY, graphWidth, graphHeight)\n\n  let _tLatestUpdate = -Infinity\n\n  return {\n    dom: canvas,\n    updateDom: (stats: BasicStats | null) => {\n      const t = performance.now()\n      // Update once every 50 ms.\n      if (stats == null || _tLatestUpdate + delayBetweenDomUpdatesMs > t) {\n        return\n      } else {\n        _tLatestUpdate = t\n      }\n\n      const { current: value, lowest: min, highest: max } = stats\n\n      context.fillStyle = backgroundColor\n      context.globalAlpha = 1\n      context.fillRect(0, 0, canvasWidth, graphY)\n      context.fillStyle = foregroundColor\n      context.fillText(`${title} (${valueFormatter(min)}â€“${valueFormatter(max)}) ${valueFormatter(value)}`, textX, textY)\n\n      context.drawImage(canvas, graphX + graphLinesSpacing, graphY, graphWidth - graphLinesSpacing, graphHeight, graphX, graphY, graphWidth - graphLinesSpacing, graphHeight)\n\n      context.fillRect(graphX + graphWidth - graphLineThickness, graphY, graphLineThickness, graphHeight)\n\n      context.fillStyle = backgroundColor\n      context.globalAlpha = 0.9\n      context.fillRect(graphX + graphWidth - graphLineThickness, graphY, graphLineThickness, roundToInt((1 - (value / max)) * graphHeight))\n    },\n  }\n\n}\n","import { onDocumentVisibilityChange } from '../../utils'\nimport { BasicStats, MetricCalculator } from '../types'\n\nexport const createFpsCalculator = () => {\n\n  let _isStable = false\n  const _sampleWindow: Array<number> = []\n\n  let _lowest = Infinity\n  let _highest = 0\n  let _count = 0\n  let _mean = 0\n\n  let isDocumentVisible = onDocumentVisibilityChange((isVisible) => {\n    isDocumentVisible = isVisible\n    _isStable = false\n    _sampleWindow.length = 0\n  })\n\n  const metric: MetricCalculator<BasicStats | null> = (t) => {\n    if (!isDocumentVisible) {\n      return null\n    }\n    _sampleWindow.push(t)\n    let elapsedFromOldest = t - _sampleWindow[0]\n    if (!_isStable) {\n      if (elapsedFromOldest >= 1900) {\n        _isStable = true\n      } else {\n        return null\n      }\n    }\n    while (elapsedFromOldest >= 1000) {\n      _sampleWindow.shift()\n      elapsedFromOldest = t - _sampleWindow[0]\n    }\n    const currFps = _sampleWindow.length\n    _count++\n    _mean = _mean * (_count - 1) / _count + currFps / _count\n    _lowest = Math.min(_lowest, currFps)\n    _highest = Math.max(_highest, currFps)\n    return {\n      current: currFps,\n      mean: _mean,\n      lowest: _lowest,\n      highest: _highest,\n    }\n  }\n\n  return metric\n\n}\n","import { onDocumentVisibilityChange } from '../../utils'\nimport { BasicStats, MetricCalculator } from '../types'\n\nexport const createFrameLatencyCalculator = () => {\n\n  let _isStable = false\n  let _tFirstVisible = Infinity\n  let _tPrev = Infinity\n  let _tCurr = Infinity\n\n  let _lowest = +Infinity\n  let _highest = -Infinity\n  let _count = 0\n  let _mean = 0\n\n  let isDocumentVisible = onDocumentVisibilityChange((isVisible) => {\n    isDocumentVisible = isVisible\n    _isStable = false\n    _tFirstVisible = Infinity\n    _tPrev = Infinity\n    _tCurr = Infinity\n  })\n\n  const metric: MetricCalculator<BasicStats | null> = (t) => {\n    if (!isDocumentVisible) {\n      return null\n    }\n    _tPrev = _tCurr\n    _tCurr = t\n    if (!_isStable) {\n      _tFirstVisible = Math.min(_tFirstVisible, t)\n      if (t - _tFirstVisible >= 1900) {\n        _isStable = true\n      } else {\n        return null\n      }\n    }\n    const currLatency = _tCurr - _tPrev\n    if (currLatency < _lowest) {\n      _lowest = currLatency\n    }\n    if (currLatency > _highest) {\n      _highest = currLatency\n    }\n    _count++\n    _mean = _mean * (_count - 1) / _count + currLatency / _count\n    return {\n      current: currLatency,\n      mean: _mean,\n      lowest: _lowest,\n      highest: _highest,\n    }\n  }\n\n  return metric\n\n}","import { BasicStats, MetricCalculator } from '../types'\n\n/**\n * More info on memory estimation: https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory\n */\nexport const createMemoryCalculator = () => {\n\n  let _lowest = Infinity\n  let _highest = 0\n  let _count = 0\n  let _mean = 0\n\n  const metric: MetricCalculator<BasicStats | null> = () => {\n    try {\n      const memory = (performance as any).memory\n      const currMem = memory.usedJSHeapSize\n      _count++\n      _mean = _mean * (_count - 1) / _count + currMem / _count\n      _lowest = Math.min(_lowest, currMem)\n      _highest = Math.max(_highest, currMem)\n      return {\n        current: currMem,\n        mean: _mean,\n        highest: _highest,\n        lowest: _lowest,\n      }\n    } catch (error) {\n    }\n    return null\n  }\n\n  return metric\n\n}","import { integerFormatter, roundToInt } from '../utils'\nimport { createBasicStatsPanel } from './basic-stats/basic-stats-panel'\nimport { createFpsCalculator } from './basic-stats/fps'\nimport { createFrameLatencyCalculator } from './basic-stats/frame-latency'\nimport { createMemoryCalculator } from './basic-stats/memory'\nimport { MonitoredMetrics } from './types'\n\nconst fps = {\n  createCalculator: createFpsCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'FPS',\n      valueFormatter: integerFormatter,\n      backgroundColor: '#181d37',\n      foregroundColor: '#6ef8fc',\n    })\n  },\n}\n\nconst frameLatency = {\n  createCalculator: createFrameLatencyCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'MS',\n      valueFormatter: integerFormatter,\n      backgroundColor: '#22361a',\n      foregroundColor: '#78f123',\n    })\n  },\n}\n\nconst memory = {\n  createCalculator: createMemoryCalculator,\n  createPanel: () => {\n    return createBasicStatsPanel({\n      title: 'MB',\n      valueFormatter: (value) => (roundToInt(value * 0.000001)).toString(),\n      backgroundColor: '#341e2a',\n      foregroundColor: '#ec5499',\n    })\n  },\n}\n\nexport const metricsUtils = {\n  fps,\n  frameLatency,\n  memory,\n  createAllDefaultMetrics: (): MonitoredMetrics => {\n    return {\n      fps: { calculator: fps.createCalculator(), panel: fps.createPanel() },\n      frameLatency: { calculator: frameLatency.createCalculator(), panel: frameLatency.createPanel() },\n      memory: { calculator: memory.createCalculator(), panel: memory.createPanel() },\n    }\n  },\n  createBasicStatsPanel,\n}","import { metricsUtils } from './metrics'\n\nexport const onDocumentVisibilityChange = (callback: (isDocumentVisible: boolean) => void): boolean => {\n\n  document.addEventListener('visibilitychange', () => {\n    callback(!document.hidden)\n  })\n\n  return !document.hidden\n}\n\nexport const roundDecimal = (decimalPlaces: number) => (x: number): number => {\n  const decimalDivider = Math.pow(10, decimalPlaces)\n  return Math.round((x * decimalDivider + Number.EPSILON) / decimalDivider)\n}\n\nexport const roundToInt = roundDecimal(0)\n\nexport const integerFormatter = (x: number): string => roundToInt(x).toString()\n\nexport const roundToTwoDecimalPlaces = roundDecimal(2)\n\nexport const roundToTwoDecimalPlacesFormatter = (x: number): string => roundToTwoDecimalPlaces(x).toString()\n\nexport const px = (x: number): string => { return `${x}px` }\n\nexport const translate = (x: number, y: number) => `translate(${x}px, ${y}px)`\n\nexport const makeElementMovable = (element: HTMLElement) => {\n\n  const paddingOffset = 200\n  let pointerDownOffsetX = 0\n  let pointerDownPaddedOffsetY = 0\n\n  function pointerUpHandler (event: PointerEvent) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    const x = event.clientX - pointerDownOffsetX\n    const y = event.clientY - pointerDownPaddedOffsetY\n\n    element.style.transform = translate(x, y)\n    element.style.padding = px(0)\n\n    element.removeEventListener('pointermove', pointerMoveHandler)\n    element.removeEventListener('pointerup', pointerUpHandler)\n\n    element.addEventListener('pointerdown', pointerDownHandler)\n\n  }\n\n  function pointerMoveHandler (event: PointerEvent) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    const x = event.clientX - pointerDownOffsetX - paddingOffset\n    const y = event.clientY - pointerDownPaddedOffsetY - paddingOffset\n\n    element.style.transform = translate(x, y)\n  }\n\n  function pointerDownHandler (event: PointerEvent) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    pointerDownOffsetX = event.offsetX\n    pointerDownPaddedOffsetY = event.offsetY\n\n    const x = event.clientX - pointerDownOffsetX - paddingOffset\n    const y = event.clientY - pointerDownPaddedOffsetY - paddingOffset\n\n    element.style.transform = translate(x, y)\n    element.style.padding = px(paddingOffset)\n\n    element.addEventListener('pointermove', pointerMoveHandler)\n    element.addEventListener('pointerup', pointerUpHandler)\n\n    element.removeEventListener('pointerdown', pointerDownHandler)\n\n  }\n\n  element.addEventListener('pointerdown', pointerDownHandler)\n\n}\n\nexport const UTILS = {\n  permonVersion: import.meta.env.__PERMON_VERSION__,\n  metrics: metricsUtils,\n  formatters: {\n    roundDecimal,\n    integerFormatter,\n    roundToTwoDecimalPlacesFormatter,\n  },\n  onDocumentVisibilityChange,\n}\n","import { MonitoredMetrics, UnwrapMonitoredMetrics } from './metrics'\nimport { makeElementMovable, px, UTILS } from './utils'\n\nexport interface PermonConfig<T extends MonitoredMetrics> {\n  metrics?: T\n  headless?: boolean\n  styleAndAppendDomContainer?: (container: HTMLDivElement) => void\n  onPublishStats?: (stats: UnwrapMonitoredMetrics<T>) => void\n  minDelayMsBetweenPublishingStats?: number\n  skipGreeting?: boolean\n}\n\ninterface PermonConfig_Normalized<T extends MonitoredMetrics> {\n  metrics: T\n  headless: boolean\n  styleAndAppendDomContainer: (container: HTMLDivElement) => void\n  onPublishStats: (stats: UnwrapMonitoredMetrics<T>) => void\n  minDelayMsBetweenPublishingStats: number\n  skipGreeting: boolean\n}\n\nconst normalizeConfig = <T extends MonitoredMetrics> (input?: PermonConfig<T>): PermonConfig_Normalized<T> => {\n  return {\n    metrics: input?.metrics == null\n      ? UTILS.metrics.createAllDefaultMetrics()\n      : Object.entries(input.metrics).reduce((acc, [key, rawMetric]) => {\n        return {\n          ...acc,\n          [key]: { panel: rawMetric.panel, calculator: rawMetric.calculator },\n        }\n      }, {} as any),\n    headless: input?.headless ?? false,\n    styleAndAppendDomContainer: input?.styleAndAppendDomContainer ?? ((container: HTMLDivElement) => {\n      container.style.cssText = 'z-index:5100;display:flex;gap:4px;position:fixed;opacity:0.9;cursor:grab;user-select:none;touch-action:none;'\n\n      container.style.top = px(0)\n      container.style.left = px(0)\n      container.style.transform = 'translate(4px, 4px)'\n\n      makeElementMovable(container)\n\n      document.body.appendChild(container)\n    }),\n    onPublishStats: input?.onPublishStats ?? (() => { }),\n    minDelayMsBetweenPublishingStats: Math.max(0, input?.minDelayMsBetweenPublishingStats ?? 1000),\n    skipGreeting: input?.skipGreeting ?? false,\n  }\n}\n\nexport class Permon<T extends MonitoredMetrics> {\n\n  private rafId: number | null = null\n  private domContainer: HTMLElement | null = null\n\n  public static readonly UTILS = UTILS\n\n  public constructor (_config?: PermonConfig<T>) {\n\n    const config = normalizeConfig(_config)\n\n    if (!config.headless) {\n      const container = document.createElement('div')\n      for (const [_, { panel }] of Object.entries(config.metrics)) {\n        if (panel?.dom != null) {\n          container.appendChild(panel.dom)\n        }\n      }\n      config.styleAndAppendDomContainer(container)\n    }\n\n    let tLatestPublish: number = -Infinity\n\n    const onAnimationFrame = () => {\n      const t = performance.now()\n      const stats = {} as UnwrapMonitoredMetrics<T>\n      for (const [key, { calculator, panel }] of Object.entries(config.metrics)) {\n        const value = calculator(t)\n        stats[key as keyof T] = value\n        if (!config.headless && panel != null) {\n          panel.updateDom(value)\n        }\n      }\n      if (tLatestPublish + config.minDelayMsBetweenPublishingStats <= t) {\n        config.onPublishStats(stats)\n        tLatestPublish = t\n      }\n      this.rafId = requestAnimationFrame(onAnimationFrame)\n    }\n\n    this.rafId = requestAnimationFrame(onAnimationFrame)\n\n    if (!config.skipGreeting) {\n      console.log(`Permon (${UTILS.permonVersion}) has started monitoring the page performance.`)\n    }\n\n  }\n\n  public destroy () {\n    if (this.rafId != null) {\n      cancelAnimationFrame(this.rafId)\n    }\n    this.rafId = null\n    this.domContainer?.remove()\n  }\n\n}\n"],"names":["normalizeConfig","memory"],"mappings":"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"}